{
    "version": "https://jsonfeed.org/version/1",
    "title": "Tachibana Shin (たちばなしん)",
    "home_page_url": "https://shin.is-a.dev/",
    "feed_url": "https://shin.is-a.dev/feed.json",
    "description": "Tachibana Shin (たちばなしん)' Blog",
    "icon": "https://shin.is-a.dev/avatar-flat.jpg",
    "author": {
        "name": "Tachibana Shin",
        "url": "https://shin.is-a.dev"
    },
    "items": [
        {
            "content_html": "<p>[[toc]]</p>\n<p>You can get v4 IP info using API: <a href=\"http://ip-api.com/json\">http://ip-api.com/json</a></p>\n<p>Get IP info (v6 preferred if available) using: <a href=\"http://api.myip.com\">http://api.myip.com</a></p>\n<p>and get all IP provider information by <code>https://api.iplocation.net/?ip=&lt;IP v4 or v6&gt;</code></p>\n<p>Try it:</p>\n<pre><code class=\"language-ts\">const [IPv4, IPv6] = await Promise.all([\n  fetch(&quot;http://ip-api.com/json&quot;).then(res =&gt; res.json()),\n  fetch(&quot;http://api.myip.com&quot;).then(res =&gt; res.json()),\n])\n\nconsole.log(IPv4, IPv6);\n\nif (IPv4.query === IPv6.ip) {\n  // not exists IP v6\n  const info = await Promise.all([\n    fetch(`https://api.iplocation.net/?ip=${IPv4.query}`).then(res =&gt; res.json()),\n  ])\n  \n  console.log(Array.from(info));\n} else {\n  const info = await Promise.all([\n    fetch(`https://api.iplocation.net/?ip=${IPv4.query}`).then(res =&gt; res.json()),\n    fetch(`https://api.iplocation.net/?ip=${IPv6.ip}`).then(res =&gt; res.json()),\n  ])\n  \n  console.log(Array.from(info));\n}\n</code></pre>\n",
            "url": "https://shin.is-a.dev/posts/get-ip-with-js",
            "title": "Get information device from JavaScript",
            "summary": "My site is now powered by Vite!",
            "date_modified": "2022-04-16T07:53:02.647Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>Hello my blog! This is first talk on my blog.</p>\n",
            "url": "https://shin.is-a.dev/posts/hello-talks",
            "title": "Hello My Talk",
            "date_modified": "2021-05-19T16:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>Hello my blog! This is first post on my blog.</p>\n",
            "url": "https://shin.is-a.dev/posts/hello",
            "title": "Hello My Blog",
            "date_modified": "2021-05-19T16:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>My sharing today is Composable Vue, some pattens and tips that might be able to help you writing better composable logic in Vue.</p>\n<h2><a href=\"https://vueuse.org/\">VueUse</a></h2>\n<p>It all started with me made this project called VueUse, which is a collection of Vue composable utilities. Initially, I was making this to share some of the functions I wrote with Vue Composition API to be used across apps. Till now, it grows much bigger with the community, we are now an organization on GitHub with 9 team members, 8 add-ons packages for different integrations like motions and document head management. We also have more than 100 functions in the core package that work for both Vue 2 and 3. I have really appreciated all the contributors and the awesome community.</p>\n<p><carbon-logo-github class=\"inline-block\"/> <a href=\"https://github.com/vueuse/vueuse\">vueuse/vueuse</a></p>\n<p>In today's talk, I will share with you the patterns and tips that I have learned during developing VueUse and using it to make apps in Composition API.</p>\n<h2>Composition API</h2>\n<p>Let's have a quick look at the Composition API itself. BTW, please note today's talk will be a little bit advanced, which I would assume you already have a basic knowledge of what the Vue Composition API is. But don't worry if you don't, I believe you will still get some basic images of the methodology and you can also find the slides and transcript on my site after the talk.</p>\n<h3>Ref vs Reactive <MarkerCore/></h3>\n<p>Well, let's start with Ref and Reactive. I bet many of you have wondered the difference between them and which one should you choose.</p>\n<p>You can think refs as variables and reactives as objects. When you do the assignment, one is assigning &quot;value&quot; while the other one is assigning properties. While the usage of them can really dependents on what you gonna use them, but if we really need to pick one from them, I'd say go with <code>ref</code> whenever you can.</p>\n<p>With <code>ref</code>, you will need to use <code>.value</code> to access and assigning values, but this also gives you more explicit awareness of when you are tracking and triggering the reactivity system.</p>\n<pre><code class=\"language-ts\">import { ref } from 'vue'\n\nlet foo = 0\nlet bar = ref(0)\n\nfoo = 1\nbar = 1 // ts-error\n</code></pre>\n<p>As you can see the example here, I actually got an error by accidentally assigning ref with a value, and here I can change the code to fix it.</p>\n<pre><code class=\"language-ts\">import { reactive } from 'vue'\n\nconst foo = { prop: 0 }\nconst bar = reactive({ prop: 0 })\n\nfoo.prop = 1\nbar.prop = 1\n</code></pre>\n<p>On the other hand, when using <code>reactive</code> you actually can't tell the difference between a plain object and a reactive object without looking for the context, which could sometimes make the debugging a little bit harder.</p>\n<p>Also note in reactive objects, there are several caveats you need to take care about. Like you can't do object destructure without <code>toRefs</code> otherwise they will lose the reactivity. And you will also need to wrap with a function when using with <code>watch</code> and so on, where <code>ref</code> does not have such limitations.</p>\n<h3>Ref Auto Unwrapping <MarkerCore /></h3>\n<p>When using with <code>refs</code>, a big obstacle that people facing is the annoying <code>.value</code>. But actually, in many cases, you can omit it and make your code looks cleaner.</p>\n<pre><code class=\"language-ts\">const counter = ref(0)\n\nwatch(counter, count =&gt; {\n  console.log(count) // same as `counter.value`\n})\n</code></pre>\n<p>The <code>watch</code> function accepts ref as the watch source directly, and it will return the unwrapped new value of the ref in the callback. So in this case, there is zero <code>.value</code> needed.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;button @click=&quot;counter += 1&quot;&gt;\n    Counter is {\\{ counter }}\n  &lt;/button&gt;\n&lt;/template&gt;\n</code></pre>\n<p>The other one is the nature of Vue, in the template, all the refs are auto unwrapped, even assignments!</p>\n<pre><code class=\"language-ts\">import { ref, reactive } from 'vue'\nconst foo = ref('bar')\nconst data = reactive({ foo, id: 10 })\ndata.foo // 'bar'\n</code></pre>\n<p>And whenever you feel like to better work with objects, you can pass the ref into the reactive object, and when you access the property, reactive will unwrap the ref automatically for you. Changes to the original ref will also reflect to the reactive object!</p>\n<h3><code>unref</code> - Oppsite of Ref <MarkerCore /></h3>\n<p><code>unref</code> is another Composition API I would like to introduce. As the name <code>unref</code> sounds, it's kinda the opposite of ref. While the <code>ref()</code> function takes a value and turns it into a ref, <code>unref()</code> takes a ref and returns its value.</p>\n<pre><code class=\"language-ts\">function unref&lt;T&gt;(r: Ref&lt;T&gt; | T): T {\n  return isRef(r) ? r.value : r\n}\n</code></pre>\n<p>The interesting part of it is that if you pass a plain value to <code>unref</code> it will return the value as-is to you, you can see the implementation is basically this.</p>\n<pre><code class=\"language-ts\">import { unref, ref } from 'vue'\n\nconst foo = ref('foo')\nunref(foo) // 'foo'\n\nconst bar = 'bar'\nunref(bar) // 'bar'\n</code></pre>\n<p>This is not a big feature, but a good tip to unify your logic which I will show you soon</p>\n<h2>Patterns &amp; Tips</h2>\n<p>That's the tips for using ref and reactive. Here I'd like to share with you some patterns of writing composable functions.</p>\n<h2>What's composable Functions</h2>\n<p>So what's composable functions?</p>\n<p>It's actually kind of hard to give a proper definition, but I'd think it's like sets for reusable logic to make your code better organized, and separate the concerns.</p>\n<pre><code class=\"language-ts\">export function useDark(options: UseDarkOptions = {}) {\n  const preferredDark = usePreferredDark()         // &lt;--\n  const store = useStorage('vueuse-dark', 'auto')  // &lt;--\n\n  return computed&lt;boolean&gt;({\n    get() {\n      return store.value === 'auto'\n        ? preferredDark.value\n        : store.value === 'dark'\n    },\n    set(v) {\n      store.value = v === preferredDark.value \n        ? 'auto' : v ? 'dark' : 'light'\n    },\n  })\n}\n</code></pre>\n<p>Here is an example, the <code>useDark</code> function in VueUse is provided as a simple toggle to enable or disable the dark mode for apps. There are actually two variables involved, one is the system's preference and one is users' manual overrides. System preference can be got using media queries, while we would also need to use localStorage to read and store the user's preference of different modes.</p>\n<DarkToggleButton/>\n<p>As you can see in this code snippet, I have used two other composable functions <a href=\"https://vueuse.org/usePreferredDark\"><code>usePreferredDark</code></a> and <a href=\"https://vueuse.org/useStorage\"><code>useStorage</code></a>, they will return two refs that reflecting on their states. Detailed things like monitoring the media query changes, the timing to read and write the storage are left to them. And all I need to do is logically composing their relationship into a single ref.</p>\n<p>You can see the full code or directly use it in VueUse with the link below.</p>\n<VueUseFn name=\"useDark\"/>\n<h3>Think as &quot;Connections&quot;</h3>\n<p>The first methodology I want to share today is to think as &quot;connections&quot;. Unlike hooks in React that will run on each updates, the <code>setup()</code> function in Vue only runs <strong>once</strong> on component initialization, to construct the relations between your state and logic.</p>\n<p>You can think the equations in mathematics, where the left hand side and right hand side are always equal. Here we have <code>z=x^2+y^2</code>, while <code>x</code> and <code>y</code> are independent variables, and <code>z</code> is a controlled variables relying on <code>x</code> and <code>y</code>. Whenever I changed any of them, <code>z</code> will be updated accordingly (DEMO). Which is also similar to the formula in spreadsheets.</p>\n<p>So in composable functions, we could think arguments are input and the returns as the output. The output should be able to reflect on input changes automatically. A bit complicated? I will walk with you on that later with examples.</p>\n<h3>One Thing at a Time</h3>\n<p>Another aspect is to do one thing at a time - which is the same as how you write any code. No need for me to spend too much time on this, but basically they are listed here.</p>\n<ul>\n<li>Extract duplicated logics into composable functions</li>\n<li>Have meaningful names</li>\n<li>Consistent naming conversions - <code>useXX</code> <code>createXX</code> <code>onXX</code></li>\n<li>Keep function small and simple</li>\n<li>&quot;Do one thing, and do it well&quot;</li>\n</ul>\n<p>Note it's also important to have a consistent naming conversion, like prefixed with <code>useXX</code> or <code>createXX</code> and so on to make those composable functions distinguishable from other functions.</p>\n<h3>Passing Ref as Arguments</h3>\n<p>Alright, let's start our first pattern today - Passing refs as arguments.</p>\n<pre><code class=\"language-ts\">function add(a: number, b: number) {\n  return a + b\n}\n</code></pre>\n<pre><code class=\"language-ts\">let a = 1\nlet b = 2\n\nlet c = add(a, b) // 3\n</code></pre>\n<p>Here we have a plain add function that sums up the two arguments <code>a</code> and <code>b</code>. You can also see the example on the right.</p>\n<pre><code class=\"language-ts\">function add(a: Ref&lt;number&gt;, b: Ref&lt;number&gt;) {\n  return computed(() =&gt; a.value + b.value)\n}\n</code></pre>\n<pre><code class=\"language-ts\">const a = ref(1)\nconst b = ref(2)\n\nconst c = add(a, b)\nc.value // 3\n</code></pre>\n<p>And then we can make this function accepting refs, and return a computed ref with their sum. Then we can pass the refs to it as we normally would with plain values. The difference here is that the returned value is also a ref, but it will always be up-to-date with the ref <code>a</code> and <code>b</code>.</p>\n<pre><code class=\"language-ts\">function add(\n  a: Ref&lt;number&gt; | number,\n  b: Ref&lt;number&gt; | number\n) {\n  return computed(() =&gt; unref(a) + unref(b))\n}\n</code></pre>\n<pre><code class=\"language-ts\">const a = ref(1)\n\nconst c = add(a, 5)\nc.value // 6\n</code></pre>\n<p>And remember the <code>unref</code> function we mentioned before? We can actually make this function more flexible, by accepting both refs and plain values. And use <code>unref</code> to get their values. We can also make the addition possible between a ref and a value.</p>\n<h3>MaybeRef</h3>\n<pre><code class=\"language-ts\">type MaybeRef&lt;T&gt; = Ref&lt;T&gt; | T\n</code></pre>\n<p>Here is a simple TypeScript's type helper called <code>MaybeRef</code> that we have used a lot in VueUse. It's a union of generic <code>T</code> and <code>Ref&lt;T&gt;</code>.</p>\n<pre><code class=\"language-ts\">export function useTimeAgo(\n  time: Date | number | string | Ref&lt;Date | number | string&gt;,\n) {\n  return computed(() =&gt; someFormating(unref(time)))\n}\n</code></pre>\n<pre><code class=\"language-ts\">import { computed, unref, Ref } from 'vue'\n\ntype MaybeRef&lt;T&gt; = Ref&lt;T&gt; | T\n\nexport function useTimeAgo(\n  time: MaybeRef&lt;Date | number | string&gt;,\n) {\n  return computed(() =&gt; someFormating(unref(time)))\n}\n</code></pre>\n<p>In this case, we have the function useTimeAgo that accepts a wide range of Date-like types as an argument. Normally if you want to accept refs, you would need to write them again as Ref versions. With this helper, you can make the type shorter and more readable (change code). A cool point it that this works great with <code>unref</code>, it can infer the correct type for <code>MaybeRef</code>.</p>\n<h3>Make it Flexible <MarkerPattern /></h3>\n<p>Think your functions like LEGO, there should have many different ways of composing them for different needs.</p>\n<pre><code class=\"language-ts\">import { useTitle } from '@vueuse/core'\n\nconst title = useTitle()\n\ntitle.value = 'Hello World'\n// now the page's title changed\n</code></pre>\n<p>Here we take <code>useTitle</code> function from VueUse as an example. Basically when you call it, you will get a special ref that binds to your page's title. Whenever you change the ref's value, the page's title will also be updated. Similarly, when the page's title changed externally, the change will also be reflect to the ref's value.</p>\n<p>Looks good, right? But It creates a new ref whenever you call it. To make it more flexible, we can actually bind an existing ref, even computed!</p>\n<pre><code class=\"language-ts\">import { ref, computed } from 'vue'\nimport { useTitle } from '@vueuse/core'\n\nconst name = ref('Hello')\nconst title = computed(() =&gt; {\n  return `${name.value} - World`\n})\n\nuseTitle(title) // Hello - World\n\nname.value = 'Hi' // Hi - World\n</code></pre>\n<p>Here you can see, I constructed a computed with a ref, when I change the source ref, the computed get re-evaluated so as the page's title.</p>\n<h3><code>useTitle</code> <Marker class=\"text-blue-400\">Case</Marker></h3>\n<p>You must be wondering how could this be implemented. Let's take a look at a simplified version of it.</p>\n<pre><code class=\"language-ts\">import { ref, watch } from 'vue'\nimport { MaybeRef } from '@vueuse/core'\n\nexport function useTitle(\n  newTitle: MaybeRef&lt;string | null | undefined&gt;\n) {\n  const title = ref(newTitle || document.title) // &lt;-- 1\n\n  watch(title, (t) =&gt; { // &lt;-- 2\n    if (t != null)\n      document.title = t\n  }, { immediate: true })\n\n  return title\n}\n</code></pre>\n<p>It's actually only two statements! How?</p>\n<p>At the first line, unified the ref from the user, or create a new one. And on the second line, it watches the changes to the ref and sync up with page's title.</p>\n<p>Emm, maybe it's a little bit hard to catch on what's happened in the first line, let me explain a bit.</p>\n<VueUseFn name=\"useTitle\"/>\n<h3>Reuse Refs <MarkerCore /></h3>\n<p>Here, we utilized an interesting behavior of the ref function.</p>\n<p>Similar to <code>unref</code> - <code>ref</code> also checks whether the passed value is ref or not. If you passed a ref to it, it will it as-is - since it's already a ref, there is no need to make another.</p>\n<pre><code class=\"language-ts\">const foo = ref(1)   // Ref&lt;1&gt;\nconst bar = ref(foo) // Ref&lt;1&gt;\n\nfoo === bar // true\n</code></pre>\n<pre><code class=\"language-ts\">function useFoo(foo: Ref&lt;string&gt; | string) {\n  // no need!\n  const bar = isRef(foo) ? foo : ref(foo)\n\n  // they are the same\n  const bar = ref(foo)\n\n  /* ... */\n}\n</code></pre>\n<p>This could also be extremely useful in composable functions that take <code>MaybeRef</code> as argument types.</p>\n<h3><code>ref</code> / <code>undef</code></h3>\n<p>Let's do a quick summary so far.</p>\n<ul>\n<li><code>MaybeRef&lt;T&gt;</code> works well with <code>ref</code> and <code>unref</code>.</li>\n<li>Use <code>ref()</code> when you want to normalized it as a Ref.</li>\n<li>Use <code>unref()</code> when you want to have the value.</li>\n</ul>\n<pre><code class=\"language-ts\">type MaybeRef&lt;T&gt; = Ref&lt;T&gt; | T\n\nfunction useBala&lt;T&gt;(arg: MaybeRef&lt;T&gt;) {\n  const reference = ref(arg) // get the ref\n  const value = unref(arg)   // get the value\n}\n</code></pre>\n<p>We can use <code>MaybeRef</code> in arguments to make the function flexible, and use <code>ref()</code> when you want to normalized it as a Ref and use <code>unref()</code> when you want to get the value. Both of them are universal and no conditions needed.</p>\n<h3>Object of Refs <MarkerPattern /></h3>\n<p>Another pattern today is to use objects of refs. When you need to return multiple data entries in a composable function, consider returns an object composed by refs.</p>\n<pre><code class=\"language-ts\">import { ref, reactive } from 'vue'\n\nfunction useMouse() {\n  return { \n    x: ref(0),\n    y: ref(0)\n  }\n}\n\nconst { x, y } = useMouse()\nconst mouse = reactive(useMouse())\n\nmouse.x === x.value // true\n</code></pre>\n<p>In this way, users can have the full features of ES6 object destructure. The restructure values are refs, so the reactivity still remains, and users can also rename them, or take only partial of what they want.</p>\n<p>On this other hand, it's also flexible enough when users want to use it as a single object, simply wrap it with the reactive function, the refs will get unwrapped as a property automatically.</p>\n<p>That said, users can get benefits from both <code>ref </code>and <code>reactive</code> as need.</p>\n<h3>Async to &quot;Sync&quot; <MarkerTips /></h3>\n<p>Since we are constructing &quot;connections&quot; using Composition API, we can actually make async functions to &quot;sync&quot; by building the connections first before it resolves.</p>\n<pre><code class=\"language-ts\">const data = await fetch('https://api.github.com/').then(r =&gt; r.json())\n\n// use data\n</code></pre>\n<p>Let's say we want to request some data use the <code>fetch</code> API. Normally we need to <code>await</code> the request been responded and data been parsed, before we can use the data. With Composition API, we can make the data as a ref of null, then be fulfilled later.</p>\n<pre><code class=\"language-ts\">const { data } = useFetch('https://api.github.com/').json()\n\nconst user_url = computed(() =&gt; data.value?.user_url)\n</code></pre>\n<p>This can make your apps take the time to handle other stuff while waiting for the data to be fetched. The idea is similar to react's stale-while-revalidate, but with much easier implementation.</p>\n<h3><code>useFetch</code> <Marker class=\"text-blue-400\">Case</Marker></h3>\n<p>The implementation can be simplified down to this, all you have to do is to assign the value to <code>ref</code> when the promise got resolved.</p>\n<pre><code class=\"language-ts\">export function useFetch&lt;R&gt;(url: MaybeRef&lt;string&gt;) {\n  const data = shallowRef&lt;T | undefined&gt;()\n  const error = shallowRef&lt;Error | undefined&gt;()\n\n  fetch(unref(url))\n    .then(r =&gt; r.json())\n    .then(r =&gt; data.value = r)\n    .catch(e =&gt; error.value = e)\n\n  return {\n    data,\n    error\n  }\n}\n</code></pre>\n<p>In the real world, we might also need some flags to show the current state of the request, where you can find the full code in VueUse.</p>\n<VueUseFn name=\"useFetch\"/>\n<h3>Side-effects Self Cleanup <MarkerPattern /></h3>\n<p><code>watch</code> and <code>computed</code> functions in Vue will stop themselves automatically along with the components unmounting. We'd recommend following the same pattern for your custom composable functions.</p>\n<p>By calling the <code>onUnmounted</code> hooks inside your composable functions, you can schedule the effect clean-up logic.</p>\n<pre><code class=\"language-ts\">import { onUnmounted } from 'vue'\n\nexport function useEventListener(target: EventTarget, name: string, fn: any) {\n  target.addEventListener(name, fn)\n\n  onUnmounted(() =&gt; {\n    target.removeEventListener(name, fn) // &lt;--\n  })\n}\n</code></pre>\n<p>For example, it's common to use <code>addEventListener</code> to register the handler to DOM events. When you finish the usage, you would also need to remember to unregister it using <code>removeEventListener</code>. In this case, we can have a function <code>useEventListener</code> that unregister itself along with the component so you don't need to worry about it anymore.</p>\n<VueUseFn name=\"useEventListener\"/>\n<h3><code>effectScope</code> RFC <Marker class=\"text-purple-400\">Upcoming</Marker></h3>\n<p>While side-effects auto clean-up is nice, sometimes you might want to have better controls over when to do that. I drafted an RFC proposing a new API called <code>effectScope</code> to collect those effects into a single instance, that you can stop them together at the time you want. This is likely to be implemented and shipped with Vue 3.1. Check out for more details if it get you interested.</p>\n<pre><code class=\"language-ts\">// effect, computed, watch, watchEffect created inside the scope will be collected\n\nconst scope = effectScope(() =&gt; {\n  const doubled = computed(() =&gt; counter.value * 2)\n\n  watch(doubled, () =&gt; console.log(double.value))\n\n  watchEffect(() =&gt; console.log('Count: ', double.value))\n})\n\n// dispose all effects in the scope\nstop(scope)\n</code></pre>\n<h3>Typed Provide / Inject</h3>\n<p>We have a set of new APIs called <code>provide</code> and <code>inject</code>. It's basically for sharing some context for the component's children to consume and reuse. They are two separate function, which means TypeScript can't actually infer the types for each context automatically.</p>\n<p>But here we have a solution for that. Vue provided a type helper called <code>InjectionKey</code> where you can define a symbol that carries the type you want, and then it will hint <code>provide</code> and <code>inject</code> to have proper autocompletion and type checking.</p>\n<pre><code class=\"language-ts\">// context.ts\nimport { InjectionKey } from 'vue'\n\nexport interface UserInfo {\n  id: number\n  name: string\n}\n\nexport const injectKeyUser: InjectionKey&lt;UserInfo&gt; = Symbol()\n</code></pre>\n<p>For example, here I defined an interface <code>UserInfo</code> which contains two properties. And I exported a symbol with the <code>InjectionKey</code> type.</p>\n<pre><code class=\"language-ts\">// parent.vue\nimport { provide } from 'vue' \nimport { injectKeyUser } from './context'\n\nexport default {\n  setup() {\n    provide(injectKeyUser, {\n      id: '7', // type error: should be number\n      name: 'Anthony'\n    })\n  }\n}\n</code></pre>\n<p>In usage, I can use the <code>provide</code> function to provide the data with key. Can you see here I get a type error that the id should be a number. So I can catch up the error right away before it goes to production.</p>\n<pre><code class=\"language-ts\">// child.vue\nimport { inject } from 'vue' \nimport { injectKeyUser } from './context'\n\nexport default {\n  setup() {\n    const user = inject(injectKeyUser) \n    // UserInfo | undefined\n\n    if (user)\n      console.log(user.name) // Anthony\n  }\n}\n</code></pre>\n<p>And in the child component, we can use the <code>inject</code> function with the key as well. You can see it correctly infers the type <code>UserInfo</code> and so as its property.</p>\n<h3>Shared State <MarkerPattern /></h3>\n<p>With the flexibility of Vue's Composition API, sharing state is actually quite simple.</p>\n<pre><code class=\"language-ts\">// shared.ts\nimport { reactive } from 'vue'\n\nexport const state = reactive({\n  foo: 1,\n  bar: 'Hello'\n})\n</code></pre>\n<p>You can declare some ref or reactive state in a js module, and import them to your components. Since they are using the same instance, the state will be just in sync.</p>\n<pre><code class=\"language-ts\">// A.vue\nimport { state } from './shared.ts'\n\nstate.foo += 1\n</code></pre>\n<pre><code class=\"language-ts\">// B.vue\nimport { state } from './shared.ts'\n\nconsole.log(state.foo) // 2\n</code></pre>\n<p>But please note this is actually not SSR compatible. In SSR your server will create a new app on each request, where this approach will keep the state persistent across multiple rendering. And normally it's not what we would expect.</p>\n<h3>Shared State (SSR friendly) <MarkerPattern /></h3>\n<p>Let's see if we can make a solution for it to work with SSR.</p>\n<pre><code class=\"language-ts\">export const myStateKey: InjectionKey&lt;MyState&gt; = Symbol()\n\nexport function createMyState() {\n  const state = {\n    /* ... */\n  }\n\n  return {\n    install(app: App) {\n      app.provide(myStateKey, state)\n    }\n  }\n}\n\nexport function useMyState(): MyState {\n  return inject(myStateKey)!\n}\n</code></pre>\n<p>By using <code>provide</code> and <code>inject</code>, to share the state one the App context, which means it will be created every time when the server doing the rendering. You can see here I have two function, <code>createMyState</code> and <code>useMyState</code>. <code>createMyState</code> will returns a Vue plugin that provide the state to the App. While <code>useMyState</code> is just a wrapper of <code>inject</code> using the same key.</p>\n<pre><code class=\"language-ts\">// main.ts\nconst App = createApp(App)\n\napp.use(createMyState())\n</code></pre>\n<pre><code class=\"language-ts\">// A.vue\n\n// use everywhere in your app\nconst state = useMyState()\n</code></pre>\n<p>In usage, we can create the state in the main entry and pass it to <code>app.use</code>. Then you can use the hook <code>useMyState</code> everywhere in your components.</p>\n<p>If you have ever tried Vue Router v4, it actually uses a similar method to do that like <code>createRouter</code> and `useRouter.</p>\n<h3>useVModel <MarkerTips /></h3>\n<p>One last tip I'd like to share is a utility called <code>useVModel</code>.</p>\n<pre><code class=\"language-ts\">export function useVModel(props, name) {\n  const emit = getCurrentInstance().emit\n\n  return computed({\n    get() {\n      return props[name]\n    },\n    set(v) {\n      emit(`update:${name}`, v)\n    }\n  })\n}\n</code></pre>\n<p>It's just a simple wrapper to the component model to bind with <code>props</code> and <code>emit</code>. This is actually a lifesaver to me.</p>\n<pre><code class=\"language-ts\">export default defineComponent({\n  setup(props) {\n    const value = useVModel(props, 'value')\n\n    return { value }\n  }\n})\n</code></pre>\n<p>We can take a look at the code, you can see we used a writable computed. When accessing the value, we forward the value of props to it, and when writing, we emit out the update event automatically so you can use just like a normal ref.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;input v-model=&quot;value&quot; /&gt;\n&lt;/template&gt;\n</code></pre>\n<p>Even more, we can actually bind into our children elements's <code>v-model</code> very easily.</p>\n<VueUseFn name=\"useVModel\"/>\n<h2>Vue 2 &amp; 3</h2>\n<p>That's all the tips and patterns I have for today.</p>\n<p>As you might think those are for Vue 3 only, but actually they also applies for Vue 2!</p>\n<h3><code>@vue/composition-api</code> <Marker class=\"text-teal-400\">Lib</Marker></h3>\n<p>In case you didn't know that, if you are still on Vue 2 but want to start using the Composition API, here we offered an official plugin that enables the Composition API for your Vue 2 app. Give it a try if you haven't.</p>\n<p><carbon-logo-github class=\"inline-block\"/> <a href=\"https://github.com/vuejs/composition-api\">vuejs/composition-api</a></p>\n<pre><code class=\"language-ts\">import Vue from 'vue'\nimport VueCompositionAPI from '@vue/composition-api'\n\nVue.use(VueCompositionAPI)\n</code></pre>\n<pre><code class=\"language-ts\">import { ref, reactive } from '@vue/composition-api'\n</code></pre>\n<h3>Vue 2.7 <Marker class=\"text-purple-400\">Upcoming</Marker></h3>\n<p>We also announced <a href=\"https://github.com/vuejs/rfcs/blob/ie11/active-rfcs/0000-vue3-ie11-support.md#for-those-who-absolutely-need-ie11-support\">our plan for Vue 2.7</a> recently. Vue 2.7 will be the last minor version of Vue 2 with long time support for existing projects and those who still need IE 11 support. We will back-port Vue 3's new features to Vue 2.7 and migrate the <code>@vue/compositon-api</code> plugin into it. Stay tuned on that.</p>\n<ul>\n<li>Backport <code>@vue/composition-api</code> into Vue 2's core.</li>\n<li><code>&lt;script setup&gt;</code> syntax in Single-File Components.</li>\n<li>Migrate codebase to TypeScript.</li>\n<li>IE11 support.</li>\n<li>LTS.</li>\n</ul>\n<h3>Vue Demi <Marker class=\"text-teal-400\">Lib</Marker></h3>\n<p>If you are a library author want your libraries to support Vue 2 and 3 with the same codebase. You can try Vue Demi, which eases out the difference between Vue 2 and 3 and auto-detects users' environment.</p>\n<p><carbon-logo-github class=\"inline-block\"/> <a href=\"https://github.com/vueuse/vue-demi\">vueuse/vue-demi</a></p>\n<pre><code class=\"language-ts\">// same syntax for both Vue 2 and 3\nimport { ref, reactive, defineComponent } from 'vue-demi'\n</code></pre>\n<h2>Thank you!</h2>\n<p>That's all for today.</p>\n<p>Due to the time limit, it's a shame that I can not share all I have learned with you. As the Vue composition API is still fairly new, I believe there are more patterns and better practices for us to found.</p>\n<p>To find more information, do check out the <a href=\"https://github.com/vueuse\">VueUse org on GitHub</a> and <a href=\"https://vueuse.org/add-ons.html\">its awesome ecosystem</a>, and follow us on Twitter <a href=\"https://twitter.com/vueuse\">@vueuse</a> to keep up-to-date with news and tips.</p>\n<p>Thank you!</p>\n",
            "url": "https://shin.is-a.dev/posts/composable-vue-vueday-2021",
            "title": "Composable Vue - VueDay 2021",
            "summary": "Slides & transcript for my talk at VueDay 2021",
            "date_modified": "2021-04-28T16:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<p>The page you are looking at is now powered by <a href=\"https://github.com/vitejs/vite\">Vite</a>. This is something I want to do for a long while since Vite came out, and it's finally done. As I have mentioned in my <a href=\"/posts/new-house\">first blog post</a>, it was powered <a href=\"https://gridsome.org/\">Gridsome</a> using Vue 2. With this overhaul, I can now take full advantage of Vue 3 and the <a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html\">Composition API</a> with the new <a href=\"https://github.com/vuejs/rfcs/pull/227\"><code>&lt;script setup&gt;</code> SFC style</a>.</p>\n<p>The reason for it taking me so long to do this is because I am busy (enjoy) doing <a href=\"https://americanexpress.io/yak-shaving\">yak shaving</a>, for the tools I need to build this site.</p>\n<h3>Dark Mode</h3>\n<p>Dark mode is supported as an experimental feature in Tailwind CSS v1.8 and shipped in v2.0. It supports two modes for you to choose from - <code>media</code> and <code>class</code>. <code>media</code> is something that works out-of-box, it changes based on users' system preference. But the limitation is that you can't toggle it manually as you want. So I went with <code>class</code> mode where I have more controls over it. But that also means I would need to implement the toggling logic myself.</p>\n<p>With the power of Vue's Composition API, I am able to combine the best parts of them - reactive to the system's preference while being able to override manually.</p>\n<pre><code class=\"language-ts\">import { useStorage, usePreferredDark } from '@vueuse/core'\n\nconst preferredDark = usePreferredDark()\nconst colorSchema = useStorage('color-schema', 'auto')\n\nexport const isDark = computed({\n  get() {\n    return colorSchema.value === 'auto'\n      ? preferredDark.value\n      : colorSchema.value === 'dark'\n  },\n  set(v: boolean) {\n    if (v === preferredDark.value)\n      colorSchema.value = 'auto'\n    else\n      colorSchema.value = v ? 'dark' : 'light'\n  },\n})\n\nwatch(\n  isDark,\n  v =&gt; document.documentElement.classList.toggle('dark', v),\n  { immediate: true },\n)\n</code></pre>\n<p>Click it to try 👇🏼</p>\n<ToggleTheme class=\"text-2xl pb-2 pt-1\"/>\n<p>If you would like to use it in your own apps, I also extract the logic above into <a href=\"https://vueuse.js.org/core/usedark/\"><code>useDark()</code> in VueUse</a>. Where you can simply use like this:</p>\n<pre><code class=\"language-ts\">import { useDark, useToggle } from '@vueuse/core'\n\nconst isDark = useDark()\nconst toggleDark = useToggle(isDark)\n</code></pre>\n<h3>Markdown</h3>\n<p>After building Icônes, I started working on the <a href=\"http://codecember.ink/\">Codecember</a> project with <a href=\"https://blog.matsu.io/about\">@octref</a>, an initiative of learning and creating generative arts in December. With the spirit of dogfooding, we chosen Vite for building the site. In Codecember we will need to have a prompt every day with some texts, code snippets, and demos. This comes with the problem that Vite does not have a plugin for handling markdown files at that moment, so of course, I made one myself.</p>\n<ul>\n<li><a href=\"https://github.com/antfu/vite-plugin-md\">vite-plugin-md</a> - Markdown for Vite.</li>\n</ul>\n<p>Basically, it uses <a href=\"https://markdown-it.github.io/\"><code>markdown-it</code></a> to transform markdown into HTML and feed it into Vue's template compiler. As the generated template is handled by Vue, we can easily support Vue components inside Markdown.</p>\n<h3>Syntax Highlighting</h3>\n<p>Getting syntax highlight works in dark mode isn't an easy task as well. <a href=\"https://github.com/shikijs/shiki\">Shiki</a> inlined all the colors into the HTML so you would not be bored by the CSS namespace pollution, but that also means it will be really hard to get the colors aware of your global color scheme. <a href=\"https://prismjs.com/\">Prism</a> on the other hand, uses the classes combining the CSS theme to do the job. It's easier to merge two color schemes and make them aware of the <code>dark</code> trigger. The bad thing is, themes are often wrote by different authors with different styles of coloring and styling things. Sometimes, even the font and spacing could be different across different themes. If you ever ran into a similar situation, you should know what I mean. If you don't (lucky you!), see <a href=\"https://github.com/PrismJS/prism-themes/tree/master/themes\">Prism's themes collection</a>(<a href=\"https://github.com/PrismJS/prism-themes/blob/c24ddffde2737293d9b2df7dc59939d527648863/themes/prism-vs.css#L9\"><code>prism-vs.css</code></a> and <a href=\"https://github.com/PrismJS/prism-themes/blob/c24ddffde2737293d9b2df7dc59939d527648863/themes/prism-vsc-dark-plus.css#L6\"><code>prism-vsc-dark-plus.css</code></a> for example).</p>\n<p>Fight with them for a while you might be able to ease the misalignment eventually. But what if we can have a smarter way to do this?</p>\n<ul>\n<li><a href=\"https://github.com/antfu/prism-theme-vars\">prism-theme-vars</a> - A customizable Prism.js theme using CSS variables.</li>\n</ul>\n<p>Instead of dealing with the lengthy CSS theme, now you can have one in less than 20 lines of CSS variables. For example:</p>\n<pre><code class=\"language-css\">@import &quot;prism-theme-vars/base.css&quot;;\n\n:root {\n  --prism-foreground: #393a34;\n  --prism-background: #fbfbfb;\n  --prism-comment: #b8c4b8;\n  --prism-string: #c67b5d;\n  --prism-literal: #3a9c9b;\n  --prism-keyword: #248459;\n  --prism-function: #849145;\n  --prism-deleted: #a14f55;\n  --prism-class: #2b91af;\n  --prism-builtin: #a52727;\n  --prism-property: #ad502b;\n  --prism-namespace: #c96880;\n  --prism-punctuation: #8e8f8b;\n}\n</code></pre>\n<p>To have it supports dark mode is extremely simple as well:</p>\n<pre><code class=\"language-css\">html:not(.dark) {\n  --prism-foreground: #393a34;\n  --prism-background: #f8f8f8;\n  --prism-comment: #758575;\n  --prism-namespace: #444444;\n  --prism-string: #bc8671;\n  --prism-punctuation: #80817d;\n  --prism-literal: #36acaa;\n  --prism-keyword: #248459;\n  --prism-function: #849145;\n  --prism-deleted: #9a050f;\n  --prism-class: #2b91af;\n  --prism-builtin: #800000;\n}\n\nhtml.dark {\n  --prism-foreground: #d4d4d4;\n  --prism-background: #1e1e1e;\n  --prism-namespace: #aaaaaa;\n  --prism-comment: #758575;\n  --prism-namespace: #444444;\n  --prism-string: #ce9178;\n  --prism-punctuation: #d4d4d4;\n  --prism-literal: #36acaa;\n  --prism-keyword: #38a776;\n  --prism-function: #dcdcaa;\n  --prism-deleted: #9a050f;\n  --prism-class: #4ec9b0;\n  --prism-builtin: #d16969;\n}\n</code></pre>\n<p>That's all. You can also play with the themes in the <a href=\"https://prism-theme-vars.netlify.app/\">Playground</a> and make some your own within 5 mins. I created my first code theme in my life using it, which is also exactly what you are looking at :)</p>\n<h3>Serve-Side Generatation (SSG)</h3>\n<p>While Codecember is more like a site than an app, we would need to do some server-side generation to improve our <a href=\"https://searchengineland.com/guide/what-is-seo\">SEO</a>. Read quite a lot of code from <a href=\"https://github.com/vuejs/vitepress\">VitePress</a>, I came up with this plugin:</p>\n<ul>\n<li><a href=\"https://github.com/antfu/vite-ssg\">vite-ssg</a> - Server-side generation for Vite.</li>\n</ul>\n<p>The idea here is fairly simple: bundle the app entry, then for each route, dump the app using APIs from the <a href=\"https://github.com/vuejs/vue-next/tree/master/packages/server-renderer\"><code>@vue/server-renderer</code></a> package. Simplified code here:</p>\n<pre><code class=\"language-ts\">import { renderToString } from '@vue/server-renderer'\n\nconst createApp = required('dist-ssr/app.js')\n\nawait Promise.all(\n  routes.map(async(route) =&gt; {\n    const { app, router, head } = createApp(false)\n\n    router.push(route)\n    await router.isReady()\n\n    const appHTML = await renderToString(app)\n    const renderedHTML = renderHTML(indexHTML, appHTML)\n\n    await fs.writeFile(`${route}.html`, renderedHTML, 'utf-8')\n  })\n)\n</code></pre>\n<p>The full code can be found <a href=\"https://github.com/antfu/vite-ssg/blob/fa256449923e05e55bf15dcf4747d517bc22e33a/src/node/build.ts#L94-L104\">here</a>.</p>\n<p>With the <a href=\"https://github.com/vueuse/head\">@vueuse/head</a> package made by <a href=\"https://github.com/egoist\">@egoist</a>, I made the document head/meta manipulation in SSG with ease. Combining with <a href=\"https://github.com/antfu/vite-plugin-md\">vite-plugin-md</a>, you can even use the frontmatter to set the meta (title, description, og:image, etc.).</p>\n<pre><code class=\"language-html\">&lt;script setup&gt;\nimport { useHead } from '@vueuse/head'\n\nuseHead({\n  title: 'Website Title',\n  meta: [\n    {\n      name: 'description',\n      content: 'Website description',\n    },\n  ],\n})\n&lt;/script&gt;\n</code></pre>\n<h3>The Vite Template</h3>\n<p>I found myself making small web apps frequently. Setting up plugins and configs for Vite kinda becomes the bottleneck for me to make my idea landded. So combining with those tools I am using, I made an opinionated template for myself but unexpectedly got quite some good feedback:</p>\n<ul>\n<li><a href=\"https://github.com/antfu/vitesse\">Vitesse</a> - Opinionated Vite Starter Template</li>\n</ul>\n<h2>This Website</h2>\n<p>This site is <strong>made from <a href=\"https://github.com/antfu/vitesse\">Vitesse</a> combining with all the tools I mentioned above</strong>. To be honest, even making a static site generator right is something hard to me, not to mention that most of the hard parts are already handled by Vite. I am really happy to see so many things I have learned and crafted along the way. And glad I can make these contributions to the Vite ecosystem, that someone could find my work useful for building their apps.</p>\n<h2>Thanks</h2>\n<p>I can't make all these happened without the help/support from the great community, thank y'all!</p>\n<p>Also want to have some special thanks to people made significant contributions towards these projects 🙌 (A-Z)</p>\n<ul>\n<li><a href=\"https://github.com/hannoeru\">@hannoeru</a></li>\n<li><a href=\"https://github.com/matias-capeletto\">@matias-capeletto</a></li>\n<li><a href=\"https://github.com/privatenumber\">@privatenumber</a></li>\n<li><a href=\"https://github.com/sibbng\">@sibbng</a></li>\n</ul>\n<p>And thank you for reading through!</p>\n",
            "url": "https://shin.is-a.dev/posts/rewrite-in-vite",
            "title": "Rewrite in Vite",
            "summary": "My site is now powered by Vite!",
            "date_modified": "2021-01-31T16:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<p><a href=\"https://twitter.com/tachib_shin/status/1298667080804233221\">As you probably know</a>, the things I excited most in Vue 3 are the <a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html\">Composition API</a> and the <a href=\"https://v3.vuejs.org/guide/reactivity.html\">reactivity system</a>. With the Composition API we can reuse logics and states across components or even apps. What's better? The underhood reactivity system is decoupled from Vue, which means you can use it almost everywhere, even without UI.</p>\n<p>Here are some proof of concepts for using the reactivity system outside of Vue:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/yyx990803/vue-lit\"><code>@vue/lit</code></a> is a minimal framework wrote by Evan combining <a href=\"https://github.com/vuejs/vue-next/tree/master/packages/reactivity\"><code>@vue/reactivity</code></a> and <a href=\"https://lit-html.polymer-project.org/\"><code>lit-html</code></a>. It can run directly in browsers, with the almost identical experience as Vue Composition API.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/antfu/reactivue\"><code>ReactiVue</code></a> ports Vue Composition API to React. It also provides React's lifecycles in the Vue style.</p>\n</li>\n</ul>\n<p>Furthermore, you can even use Vue's libraries in them. Tested with <a href=\"https://github.com/antfu/vueuse\"><code>VueUse</code></a> and <a href=\"https://github.com/posva/pinia\"><code>pinia</code></a> in <a href=\"https://github.com/antfu/reactivue\"><code>ReactiVue</code></a>, and they just work. You can find <a href=\"https://github.com/antfu/reactivue#using-vues-libraries\">more details and examples here</a>.</p>\n<p>I am also experimenting more possibility of Vue reactivity in other scenarios. It's currently a WIP private repo, but keep tuned, I get more to come 😉!</p>\n<h2>Understanding <code>@vue/reactivity</code></h2>\n<p>&quot;reactive objects&quot; returned by <code>ref()</code> or <code>reactive()</code> are actually <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxies</a>. Those proxies will trigger some actions to track the changes on properties accessing or writing.</p>\n<p>For a simplified example,</p>\n<pre><code class=\"language-ts\">const reactive = (target) =&gt; new Proxy(target, {\n  get(target, prop, receiver) {\n    track(target, prop)\n    return Reflect.get(...arguments) // get the original data\n  },\n  set(target, key, value, receiver) {\n    trigger(target, key)\n    return Reflect.set(...arguments) // set the original data\n  }\n})\n\nconst obj = reactive({\n  hello: 'world'\n})\n\nconsole.log(obj.hello) // `track()` get called\nobj.hello = 'vue' // `trigger()` get called\n</code></pre>\n<p>So in this way, vue can be notified when those properties get accessed or when they be modified.</p>\n<blockquote>\n<p>For more detailed explanations, check out the <a href=\"https://v3.vuejs.org/guide/reactivity.html#what-is-reactivity\">official docs</a></p>\n</blockquote>\n<h3>Computed</h3>\n<p>Since we are able to know those events, we can start diving into the <code>computed</code> which is where the &quot;reactive&quot; magic start shining.</p>\n<p><code>computed</code> is like a getter that auto collects the reactive dependencies source and auto re-evaluate when they get changed.</p>\n<p>For example,</p>\n<pre><code class=\"language-ts\">const counter = ref(1)\nconst multiplier = ref(2)\n\nconst result = computed(() =&gt; counter.value * multiplier.value)\n\nconsole.log(result.value) // 2\ncounter.value += 1\nconsole.log(result.value) // 4\n</code></pre>\n<p>To know how the <code>computed</code> work, we need to dig into the lower level API <code>effect</code> first.</p>\n<h2>Effect</h2>\n<p><code>effect</code> is a new API introduced in Vue 3. Underneath, it's the engine powers the &quot;reactivity&quot; in <code>computed</code> and <code>watch</code>. For the most of the time, you don't need to directly use it. But knowing it well helps you understand the reactivity system much easier.</p>\n<p><code>effect</code> takes the first argument as the <code>getter</code> and a second argument for the options. The <code>getter</code> is the function that collect its deps on each run via their <code>track()</code> hooks. The field <code>scheduler</code> in options provides a way to invoke a custom function when the deps change.</p>\n<p>So basically, you can write a simple <code>computed</code> on your own like:</p>\n<pre><code class=\"language-ts\">const computed = (getter) =&gt; {\n  let value\n  let dirty = true\n  \n  const runner = effect(getter, {\n    lazy: true,\n    scheduler() {\n      dirty = true // deps changed\n    }\n  })\n  \n  // return should be a `Ref` in real world, simplified here\n  return {\n    get value() {\n      if (dirty) {\n        value = runner() // re-evaluate\n        dirty = false\n      }\n      return value\n    }\n  }\n}\n</code></pre>\n<p>If you really interested in how it works in Vue, check out <a href=\"https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/computed.ts\">the source code here</a></p>\n<h2>Build yourself a <code>watch</code></h2>\n<p>We have done the most important APIs in <code>@vue/reactivity</code> now, which is <code>ref</code> <code>reactive</code> <code>effect</code> <code>computed</code>.</p>\n<p>Oh wait, we are missing the <code>watch</code> here!</p>\n<pre><code class=\"language-js\">import { watch } from '@vue/reactivity' // does NOT exist!\n</code></pre>\n<p>If you take a look at Vue 3's source code, you will find that <code>watch</code> is actually <a href=\"https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/apiWatch.ts\">implemented in <code>@vue/runtime-core</code></a>, along with the Vue's component model and lifecycles. The main reason for this is that <code>watch</code> is deep bound with the component's lifecycles (auto dispose, invalidate, etc.). But it shouldn't be the thing to keep you from using it outside of Vue.</p>\n<p>Let's implement the <code>watch</code> our own!</p>\n<h3>The Basic</h3>\n<p>Let's take a look at Vue's watch interface first</p>\n<pre><code class=\"language-ts\">const count = ref(0)\n\nwatch(\n  () =&gt; count.value,\n  (newValue) =&gt; {\n    console.log(`count changed to: ${newValue}!`)\n  }\n)\n\ncount.value = 2\n// count changed to: 2!\n</code></pre>\n<p>With the knowledge of <code>effect</code>, it's quite straight forward to implement</p>\n<pre><code class=\"language-ts\">const watch = (getter, fn) =&gt; {\n  const runner = effect(getter, {\n    lazy: true,\n    scheduler: fn\n  }\n  \n  // a callback function is returned to stop the effect\n  return () =&gt; stop(runner)\n}\n</code></pre>\n<p>Watch is lazy by default in Vue, you can add the third options to give control to the users.</p>\n<h3>Watch for Ref</h3>\n<p>You may also notice that the Vue's <code>watch</code> also allows passing the ref directly to it.</p>\n<pre><code class=\"language-ts\">watch(\n  count,\n  () =&gt; { /* onChanged */ }\n)\n</code></pre>\n<p>For that, just wrap it into a getter will do</p>\n<pre><code class=\"language-ts\">const watch = (source, fn) =&gt; {\n  const getter = isRef(source)\n    ? () =&gt; source.value\n    : source\n\n  const runner = effect(getter, {\n    lazy: true,\n    scheduler: fn\n  }\n\n  return () =&gt; stop(runner)\n}\n</code></pre>\n<h3>Watch Deeply</h3>\n<p>One other great feature about <code>watch</code> is that it allows you to watch on deep changes.</p>\n<pre><code class=\"language-ts\">const state = reactive({\n  info: {\n    name: 'Anthony',\n  }\n})\n\nwatch(state, () =&gt; { console.log('changed!') }, { deep: true })\n\nstate.info.name = 'Tachibana Shin (たちばなしん)'\n// changed!\n</code></pre>\n<p>To implement this feature, you need to collect the <code>track()</code> events on every nested property. We can achieve that with a <code>traverse</code> function.</p>\n<pre><code class=\"language-ts\">function traverse(value, seen = new Set()) {\n  if (!isObject(value) || seen.has(value))\n    return value\n\n  seen.add(value) // prevent circular reference \n  if (isArray(value)) {\n    for (let i = 0; i &lt; value.length; i++)\n      traverse(value[i], seen)\n  }\n  else {\n    for (const key of Object.keys(value))\n      traverse(value[key], seen)\n  }\n  return value\n}\n\nconst watch = (source, fn, { deep, lazy = true }) =&gt; {\n  let getter = isRef(source)\n    ? () =&gt; source.value\n    : isReactive(source) \n      ? () =&gt; source\n      : source\n    \n  if (deep)\n    getter = () =&gt; traverse(getter())\n    \n  const runner = effect(getter, {\n    lazy,\n    scheduler: fn\n  }\n\n  return () =&gt; stop(runner)\n}\n</code></pre>\n<p>Done! The thing left to do is to polish, adding overloads to make it more flexible, add more options to get better control, and handle some edge cases. Then you should get yourself a good start for using a custom <code>watch</code>!</p>\n<h2>Lifecycles</h2>\n<p>In Vue, <code>computed</code> and <code>watch</code> will automatically bind their <code>effect</code> runner to the current component instance. When the component get unmounted, the effects bond to it will be auto disposed. More specially, you can read <a href=\"https://github.com/vuejs/vue-next/blob/985bd2bcb5fd8bccd1c15c8c5d89a6919fd73922/packages/runtime-core/src/apiWatch.ts#L294\">the source code here</a>.</p>\n<p>Since we don't have an instance, if you want to stop those effects, you have to do them manually. When you have multiple effects in used, to stop them together, you have to manually collect them together. One easier way is to mock similar lifecycles like Vue. This requires some amount of works, I will explain that in another blog post. Please keep tuned.</p>\n<h2>Take Away</h2>\n<p>Thanks for reading! And hope it is helpful for you to understand and better play with the Vue reactivity system. If you want to have the <code>watch</code> outside of Vue, I made one for you (much more robust than the examples above for sure).</p>\n<pre class=\"block language-bash\">\nyarn add <a href='https://github.com/antfu/vue-reactivity-watch' target='_blank'>@vue-reactivity/watch</a>\n</pre> \n<p>Have fun ;P</p>\n",
            "url": "https://shin.is-a.dev/posts/watch-with-reactivity",
            "title": "Watch with @vue/reactivity",
            "summary": "A brief intro of how it works and a guide to implementing the (missing) `watch` on your own.",
            "date_modified": "2020-09-18T00:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<p>As you may or may not know, I am working on preparing to release the v1.0 version for <a href=\"https://github.com/vuejs/composition-api\">@vue/composition-api</a> recently. One of the current problems is that the type inference does not play well <a href=\"https://github.com/vuejs/composition-api/issues/338\">#338</a>. So I get a chance to have a deeper look at <a href=\"https://github.com/vuejs/composition-api\">vue-next</a>'s type implementations. I will tell you what I learned and how magic works in Vue.</p>\n<p>Forget about the <code>setup()</code> function and <code>Composition API</code> for now, let talk about the options API in Vue 2 that everybody familiar with. In a classical example, we would have <code>data</code>, <code>computed</code>, <code>methods</code> and some other fields like this:</p>\n<pre><code class=\"language-js\">export default {\n  data: {\n    first_name: &quot;Anthony&quot;,\n    last_name: &quot;Fu&quot;,\n  },\n  computed: {\n    full_name() {\n      return this.first_name + &quot; &quot; + this.last_name\n    },\n  },\n  methods: {\n    hi() {\n      alert(this.full_name)\n    }\n  }\n}\n</code></pre>\n<p>It works well in Javascript and putting all the context into <code>this</code> is pretty straightforward and easy to understand. But when you switch to TypeScript for static type checking. <code>this</code> will not be the context you expected. How can we make the types work for Vue like the example above?</p>\n<h2>Type for <code>this</code></h2>\n<p>To explicitly assign the type to <code>this</code>, we can simply use the <code>this parameter</code>:</p>\n<pre><code class=\"language-ts\">interface Context {\n  $injected: string\n}\n\nfunction bar(this: Context, a: number) {\n  this.$injected // ok\n}\n</code></pre>\n<p>The limitation of this approach is that we will lose the signature of the method when working with a dict of methods:</p>\n<pre><code class=\"language-ts\">type Methods = Record&lt;string, (this: Context, ...args:any[]) =&gt; any&gt;\n\nconst methods: Methods = {\n  bar(a: number) {\n    this.$injected // ok\n  }\n}\n\nmethods.bar('foo', 'bar') // no error, the type of arguments becomes `any[]`\n</code></pre>\n<p>We would not want to ask users to explicitly type <code>this</code> in every method in order to make the type checking works.<br>\nSo we will need another approach.</p>\n<h3><a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypet\"><code>ThisType</code></a></h3>\n<p>After digging into Vue's code, I found an interesting TypeScirpt utility <code>ThisType</code>. The official doc says:</p>\n<blockquote>\n<p>This utility does not return a transformed type. Instead, it serves as a marker for a contextual <code>this</code> type.</p>\n</blockquote>\n<p><code>ThisType</code> would affect all the nested functions. With it, we can have:</p>\n<pre><code class=\"language-ts\">type Methods = {\n  double: (a: number) =&gt; number\n  deep: {\n    nested: {\n      half: (a: number) =&gt; number\n    }\n  }\n}\n\nconst methods: Methods &amp; ThisType&lt;Methods &amp; Context&gt; = {\n  double(a: number) {\n    this.$injected // ok\n    return a * 2\n  },\n  deep: {\n    nested: {\n      half(a: number) {\n        this.$injected // ok\n        return a / 2\n      }\n    }\n  }\n}\n\nmethods.double(2) // ok\nmethods.double('foo') // error\nmethods.deep.nested.half(4) // ok\n</code></pre>\n<p>The typing works well, but it still requires users to define the type interface of Methods first. Can we make it infer itself automatically?</p>\n<p>We can do that with function inference:</p>\n<pre><code class=\"language-ts\">type Options&lt;T&gt; = {\n  methods?: T \n} &amp; ThisType&lt;T &amp; Context&gt;\n\nfunction define&lt;T&gt;(options: Options&lt;T&gt;) {\n  return options\n}\n\ndefine({\n  methods: {\n    foo() {\n      this.$injected // ok\n    },\n  },\n})\n</code></pre>\n<p>There is only one step left, to make context object dynamic inference from <code>data</code> and <code>computed</code>.</p>\n<p>The full working demo would be:</p>\n<pre><code class=\"language-ts\">/* ---- Type ---- */\nexport type ExtractComputedReturns&lt;T extends any&gt; = {\n  [key in keyof T]: T[key] extends (...args: any[]) =&gt; infer TReturn\n    ? TReturn\n    : never\n}\n\ntype Options&lt;D = {}, C = {}, M = {}&gt; = {\n  data: () =&gt; D\n  computed: C\n  methods: M\n  mounted: () =&gt; void\n  // and other options\n} \n&amp; ThisType&lt;D &amp; M &amp; ExtractComputedReturns&lt;C&gt;&gt; // merge them together\n\nfunction define&lt;D, C, M&gt;(options: Options&lt;D, C, M&gt;) {}\n\n/* ---- Usage ---- */\ndefine({\n  data() {\n    return {\n      first_name: &quot;Anthony&quot;,\n      last_name: &quot;Fu&quot;,\n    }\n  },\n  computed: {\n    fullname() {\n      return this.first_name + &quot; &quot; + this.last_name\n    },\n  },\n  methods: {\n    notify(msg: string) {\n      alert(msg)\n    }\n  },\n  mounted() {\n    this.notify(this.fullname)\n  },\n})\n</code></pre>\n",
            "url": "https://shin.is-a.dev/posts/type-inferencing-in-vue",
            "title": "Type Inferencing in Vue",
            "date_modified": "2020-06-28T00:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        },
        {
            "content_html": "<p>Saw <a href=\"https://twitter.com/youyuxi/status/1272932071749619712\">a tweet from Evan You</a> about the <a href=\"https://hey.com/\">hey.com</a> mail service recently. I got interested in having a short and nice email address. My current one in Hotmail is just too long to even being spell out in talk. <code>hey.com</code> looks very nice but $99/year is not a very good deal to me. I decide to use my own domain for receiving emails.</p>\n<p>I did this a couple years ago for another domain, I kinda remember an open-source tool allowing forwarding emails by just adding DNS record. I took some time to search for it but I didn't find the page matches with my memory. I went GitHub to search in my stared projects, it turns out the tool now becomes and Freemium SaaS <a href=\"https://forwardemail.net/\">forwardemail.net</a> with a fresh new logo and website design that I can't even recognize it.</p>\n<p>The DNS forwarding feature just works the same, but it requires you to log in and register your domain now. I am glad it now being more well documented and charging for premium supports which can help it sustain.</p>\n<p>The config is quite simple as usual, just 3 DNS record:</p>\n<pre><code class=\"language-html\">MX   @  mx1.forwardemail.net  10\nMX   @  mx2.forwardemail.net  20\nTXT  @  forward-email=youremail@example.com\n</code></pre>\n<p>That’s it! It also provides some advanced configs, you can check <a href=\"https://forwardemail.net/en/faq\">the doc here</a>.</p>\n<p>While setting up and reading the docs, I learned that you can explicitly purge the cache for <a href=\"https://1.1.1.1/purge-cache/\">Cloudflare DNS</a> and <a href=\"https://developers.google.com/speed/public-dns/cache\">Google DNS</a>. That's a very good-to-know tip!</p>\n",
            "url": "https://shin.is-a.dev/posts/domain-email",
            "title": "Domain Email",
            "date_modified": "2020-06-17T16:00:00.000Z",
            "author": {
                "name": "Tachibana Shin",
                "url": "https://shin.is-a.dev"
            }
        }
    ]
}